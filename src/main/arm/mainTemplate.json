{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "[deployment().properties.templateLink.uri]",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "identity": {
            "type": "object",
            "metadata": {
                "description": "User-assigned managed identity granted with contributor role of the same subscription"
            }
        },
        "createCluster": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to create a new cluster or not"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "The VM size of the cluster"
            }
        },
        "minCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The minimum node count of the cluster"
            }
        },
        "maxCount": {
            "type": "int",
            "defaultValue": 5,
            "metadata": {
                "description": "The maximum node count of the cluster"
            }
        },
        "clusterId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "ID for the existing cluster"
            }
        },
        "createACR": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to create a new ACR or not"
            }
        },
        "acrId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "ID for the existing ACR"
            }
        },
        "deployApplication": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to deploy an application"
            }
        },
        "appImagePath": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "The image path of the application"
            }
        },
        "appReplicas": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The number of application replicas to deploy"
            }
        },
        "guidValue": {
            "defaultValue": "[newGuid()]",
            "type": "securestring"
        }
    },
    "variables": {
        "const_acrPullRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "const_appImage": "[concat(variables('const_appImageName'), ':', variables('const_appImageTag'))]",
        "const_appImageName": "[concat('image', variables('const_suffix'))]",
        "const_appImagePath": "[if(empty(parameters('appImagePath')), 'NA', if(equals(variables('const_appImagePathLen'), 1), concat('docker.io/library/', parameters('appImagePath')), if(equals(variables('const_appImagePathLen'), 2), concat('docker.io/', parameters('appImagePath')), parameters('appImagePath'))))]",
        "const_appImagePathLen": "[length(split(parameters('appImagePath'), '/'))]",
        "const_appImageTag": "1.0.0",
        "const_appName": "[concat('app', variables('const_suffix'))]",
        "const_appProjName": "default",
        "const_arguments": "[concat(variables('const_clusterRGName'), ' ', variables('name_clusterName'), ' ', variables('name_acrName'), ' ', parameters('deployApplication'), ' ', variables('const_appImagePath'), ' ', variables('const_appName'), ' ', variables('const_appProjName'), ' ', variables('const_appImage'), ' ', parameters('appReplicas'))]",
        "const_clusterRGName": "[if(parameters('createCluster'), resourceGroup().name, last(take(split(parameters('clusterId'), '/'), 5)))]",
        "const_cmdToGetAcrLoginServer": "[concat('az acr show -n ', variables('name_acrName'), ' --query loginServer -o tsv')]",
        "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
        "const_suffix": "[take(replace(parameters('guidValue'), '-', ''), 6)]",
        "name_acrName": "[if(parameters('createACR'), concat('acr', variables('const_suffix')), last(split(parameters('acrId'), '/')))]",
        "name_acrPullRoleAssignmentName": "[concat(variables('name_acrName'), '/Microsoft.Authorization/', guid(resourceGroup().id, deployment().name, 'acrPullRoleAssignment'))]",
        "name_clusterName": "[if(parameters('createCluster'), concat('cluster', variables('const_suffix')), last(split(parameters('clusterId'), '/')))]",
        "name_deploymentScriptName": "[concat('script', variables('const_suffix'))]",
        "name_cpDeploymentScript": "[concat('cpscript', variables('const_suffix'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${customer.usage.attribution.id}",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${aks.start}",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "${azure.apiVersion.deploymentScript}",
            "name": "[variables('name_cpDeploymentScript')]",
            "location": "[parameters('location')]",
            "kind": "AzureCLI",
            "identity": "[parameters('identity')]",
            "properties": {
                "AzCliVersion": "2.15.0",
                "primaryScriptUri": "[uri(variables('const_scriptLocation'), concat('check-permission.sh', parameters('_artifactsLocationSasToken')))]",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "${azure.apiVersion.acr}",
            "name": "[variables('name_acrName')]",
            "location": "[parameters('location')]",
            "condition": "[parameters('createACR')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', variables('name_cpDeploymentScript'))]"
            ],
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "adminUserEnabled": true
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "${azure.apiVersion.aksCluster}",
            "name": "[variables('name_clusterName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', variables('name_cpDeploymentScript'))]"
            ],
            "condition": "[parameters('createCluster')]",
            "properties": {
                "enableRBAC": true,
                "dnsPrefix": "[concat(variables('name_clusterName'), '-dns')]",
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": 0,
                        "enableAutoScaling": true,
                        "minCount": "[parameters('minCount')]",
                        "maxCount": "[parameters('maxCount')]",
                        "count": "[parameters('minCount')]",
                        "vmSize": "[parameters('vmSize')]",
                        "osType": "Linux",
                        "storageProfile": "ManagedDisks",
                        "type": "VirtualMachineScaleSets",
                        "mode": "System",
                        "availabilityZones": [
                            "1",
                            "2",
                            "3"
                        ]
                    }
                ],
                "networkProfile": {
                    "loadBalancerSku": "standard",
                    "networkPlugin": "kubenet"
                }
            },
            "identity": {
                "type": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
            "apiVersion": "${azure.apiVersion.roleAssignment}",
            "name": "[variables('name_acrPullRoleAssignmentName')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('name_clusterName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('name_acrName'))]"
            ],
            "properties": {
                "scope": "[if(parameters('createACR'), resourceId('Microsoft.ContainerRegistry/registries', variables('name_acrName')), parameters('acrId'))]",
                "principalId": "[reference(if(parameters('createCluster'), variables('name_clusterName'), parameters('clusterId')), '${azure.apiVersion.aksCluster}', 'Full').properties.identityProfile.kubeletidentity.objectId]",
                "roleDefinitionId": "[variables('const_acrPullRoleId')]"
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "${azure.apiVersion.deploymentScript}",
            "name": "[variables('name_deploymentScriptName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('name_clusterName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('name_acrName'))]"
            ],
            "kind": "AzureCLI",
            "identity": "[parameters('identity')]",
            "properties": {
                "AzCliVersion": "2.15.0",
                "arguments": "[variables('const_arguments')]",
                "primaryScriptUri": "[uri(variables('const_scriptLocation'), concat('install.sh', parameters('_artifactsLocationSasToken')))]",
                "supportingScriptUris":[
                    "[uri(variables('const_scriptLocation'), concat('open-liberty-application.yaml.template', parameters('_artifactsLocationSasToken')))]"
                ],
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${aks.end}",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', variables('name_deploymentScriptName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        }
    ],
    "outputs": {
        "appEndpoint (Append context root defined in the 'server.xml' of your application if it's not equal to '/')": {
            "condition": "[parameters('deployApplication')]",
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appEndpoint]",
            "type": "string"
        },
        "clusterName": {
            "value": "[variables('name_clusterName')]",
            "type": "string"
        },
        "clusterRGName": {
            "value": "[variables('const_clusterRGName')]",
            "type": "string"
        },
        "acrName": {
            "value": "[variables('name_acrName')]",
            "type": "string"
        },
        "cmdToGetAcrLoginServer": {
            "value": "[variables('const_cmdToGetAcrLoginServer')]",
            "type": "string"
        },
        "appNamespaceName": {
            "value": "[variables('const_appProjName')]",
            "type": "string"
        },
        "appName": {
            "condition": "[parameters('deployApplication')]",
            "value": "[variables('const_appName')]",
            "type": "string"
        },
        "appImage": {
            "condition": "[parameters('deployApplication')]",
            "value": "[variables('const_appImage')]",
            "type": "string"
        },
        "cmdToConnectToCluster": {
            "value": "[concat('az aks get-credentials -g ', variables('const_clusterRGName'), ' -n ', variables('name_clusterName'))]",
            "type": "string"
        },
        "cmdToGetAppInstance": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('kubectl get openlibertyapplication ', variables('const_appName'), ' -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToGetAppDeployment": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('kubectl get deployment ', variables('const_appName'), ' -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToGetAppPods": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('kubectl get pod -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToGetAppService": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('kubectl get service ', variables('const_appName'), ' -n ', variables('const_appProjName'))]",
            "type": "string"
        },
        "cmdToLoginInRegistry": {
            "value": "[concat('az acr login -n ', variables('name_acrName'))]",
            "type": "string"
        },
        "cmdToPullImageFromRegistry (Please execute command in `cmdToLoginInRegistry` before executing this one)": {
            "condition": "[parameters('deployApplication')]",
            "value": "[concat('docker pull $(', variables('const_cmdToGetAcrLoginServer'), ')/', variables('const_appImage'))]",
            "type": "string"
        },
        "cmdToTagImageWithRegistry (Please replace '<source-image-path>' and '<target-image-name:tag>' with yours)": {
            "value": "[concat('docker tag <source-image-path> $(', variables('const_cmdToGetAcrLoginServer'), ')/<target-image-name:tag>')]",
            "type": "string"
        },
        "cmdToPushImageToRegistry (Please execute commands in `cmdToLoginInRegistry` and `cmdToTagImageWithRegistry` before executing this one)": {
            "value": "[concat('docker push $(', variables('const_cmdToGetAcrLoginServer'), ')/<target-image-name:tag>')]",
            "type": "string"
        },
        "appDeploymentYamlEncoded (Use `echo \"copied-value\" | base64 -d` to decode the text)": {
            "condition": "[parameters('deployApplication')]",
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appDeploymentYaml]",
            "type": "string"
        },
        "appDeploymentTemplateYamlEncoded (Use `echo \"copied-value\" | base64 -d` to decode the text)": {
            "condition": "[not(parameters('deployApplication'))]",
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appDeploymentYaml]",
            "type": "string"
        },
        "cmdToUpdateOrCreateApplication (Please execute command in `cmdToConnectToCluster` before executing this one)": {
            "value": "[concat('kubectl apply -f <application-yaml-file-path> -n ', variables('const_appProjName'))]",
            "type": "string"
        }
    }
}